{"ast":null,"code":"var _jsxFileName = \"/Users/lakshansomapala/Desktop/Test Projects/monsters-rolodex-hooks/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { Component, useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport CardList from './component/card-list/card-list.component';\nimport SearchBox from './component/search-box/search-box.component';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [searchField, setSearchField] = useState(''); // [value, setValue], string variabel\n\n  const [monsters, setMonsters] = useState([]); // array variable\n\n  const [filteredMonsters, setFilteredMonsters] = useState(monsters);\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => setMonsters(users));\n  }, []); // this fetch will fired only when component mount (initial state of the program) because of empty array which means no dependancis to be change to re-render this hook.\n\n  useEffect(() => {\n    const newFileteredMonsters = monsters.filter(monster => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    setFilteredMonsters(newFileteredMonsters);\n  }, [monsters, searchField]); // this hook will call every time when monsters or searchField value changes.\n\n  const onSearchChange = event => {\n    const searchFieldString = event.target.value.toLocaleLowerCase();\n    setSearchField(searchFieldString);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"app-title\",\n      children: \"Monsters Rolodex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n      className: \"monsters-search-box\",\n      placeHolder: \"search monsters\",\n      onChangeHandler: onSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardList, {\n      monsters: filteredMonsters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}; // class App extends Component { //sadasdasdadwssa\n//   constructor() {\n//     super();\n//     this.state = {\n//       monsters: [],\n//       searchField: '',\n//     };\n//     console.log('constructor');\n//   }\n// componentDidMount() { // when react renders first time this will occuer. this happens only onces.\n//   console.log('componentDidMount');\n//   fetch('https://jsonplaceholder.typicode.com/users')\n//     .then((response) => response.json())\n//     .then((users) =>\n//       this.setState(\n//         () => {\n//           return { monsters: users };\n//         }\n//       )\n//     );\n// }\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLocaleLowerCase();\n//     this.setState(() => {\n//       return { searchField };\n//     })\n//     console.log(event);\n//   }\n//   render() {\n//     console.log('render');\n//     const { monsters, searchField } = this.state;\n//     const { onSearchChange } = this;\n//     const filteredMonsters = monsters.filter((monster) => {\n//       return monster.name.toLocaleLowerCase().includes(searchField);\n//     });\n//     return (\n//       <div className=\"App\">\n//         <h1 className='app-title'>Monsters Rolodex</h1>\n//         {/* <input className='search-box' type='search' placeholder='search monsters' onChange={onSearchChange} /> */}\n//         {/* {filteredMonsters.map((monster) => {\n//           return (\n//             <div key={monster.id}>\n//               <h1>{monster.name}</h1>\n//             </div>\n//           );\n//         })} */}\n//         {/* Move to component */}\n//         <SearchBox\n//           className='monsters-search-box'\n//           placeHolder='search monsters'\n//           onChangeHandler={onSearchChange}\n//         ></SearchBox>\n//         <CardList monsters={filteredMonsters}></CardList>\n//       </div>\n//     );\n//   }\n// }\n\n\n_s(App, \"YjM+qWSyF3I2IMx5PoA1UagYOq0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Component","useEffect","useState","logo","CardList","SearchBox","App","searchField","setSearchField","monsters","setMonsters","filteredMonsters","setFilteredMonsters","fetch","then","response","json","users","newFileteredMonsters","filter","monster","name","toLocaleLowerCase","includes","onSearchChange","event","searchFieldString","target","value"],"sources":["/Users/lakshansomapala/Desktop/Test Projects/monsters-rolodex-hooks/src/App.js"],"sourcesContent":["import { Component, useEffect, useState } from 'react';\n\nimport logo from './logo.svg';\nimport CardList from './component/card-list/card-list.component'\nimport SearchBox from './component/search-box/search-box.component'\nimport './App.css';\n\nconst App = () => {\n  const [searchField, setSearchField] = useState('') // [value, setValue], string variabel\n  const [monsters, setMonsters] = useState([]); // array variable\n  const [filteredMonsters, setFilteredMonsters] = useState(monsters);\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => setMonsters(users));\n  }, []) // this fetch will fired only when component mount (initial state of the program) because of empty array which means no dependancis to be change to re-render this hook.\n\n  useEffect(() => {\n    const newFileteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    setFilteredMonsters(newFileteredMonsters);\n  }, [monsters, searchField]) // this hook will call every time when monsters or searchField value changes.\n\n  const onSearchChange = (event) => {\n    const searchFieldString = event.target.value.toLocaleLowerCase();\n    setSearchField(searchFieldString);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 className='app-title'>Monsters Rolodex</h1>\n      <SearchBox\n        className='monsters-search-box'\n        placeHolder='search monsters'\n        onChangeHandler={onSearchChange}\n      ></SearchBox>\n      <CardList monsters={filteredMonsters}></CardList>\n    </div>\n  )\n};\n\n// class App extends Component { //sadasdasdadwssa\n//   constructor() {\n//     super();\n\n//     this.state = {\n//       monsters: [],\n//       searchField: '',\n//     };\n//     console.log('constructor');\n//   }\n\n// componentDidMount() { // when react renders first time this will occuer. this happens only onces.\n//   console.log('componentDidMount');\n//   fetch('https://jsonplaceholder.typicode.com/users')\n//     .then((response) => response.json())\n//     .then((users) =>\n//       this.setState(\n//         () => {\n//           return { monsters: users };\n//         }\n//       )\n//     );\n// }\n\n//   onSearchChange = (event) => {\n//     const searchField = event.target.value.toLocaleLowerCase();\n//     this.setState(() => {\n//       return { searchField };\n//     })\n//     console.log(event);\n//   }\n\n//   render() {\n//     console.log('render');\n//     const { monsters, searchField } = this.state;\n//     const { onSearchChange } = this;\n\n//     const filteredMonsters = monsters.filter((monster) => {\n//       return monster.name.toLocaleLowerCase().includes(searchField);\n//     });\n\n//     return (\n//       <div className=\"App\">\n//         <h1 className='app-title'>Monsters Rolodex</h1>\n//         {/* <input className='search-box' type='search' placeholder='search monsters' onChange={onSearchChange} /> */}\n//         {/* {filteredMonsters.map((monster) => {\n//           return (\n//             <div key={monster.id}>\n//               <h1>{monster.name}</h1>\n//             </div>\n//           );\n//         })} */}\n\n//         {/* Move to component */}\n//         <SearchBox\n//           className='monsters-search-box'\n//           placeHolder='search monsters'\n//           onChangeHandler={onSearchChange}\n//         ></SearchBox>\n//         <CardList monsters={filteredMonsters}></CardList>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,QAAP,MAAqB,2CAArB;AACA,OAAOC,SAAP,MAAsB,6CAAtB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C,CADgB,CACmC;;EACnD,MAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC,CAFgB,CAE8B;;EAC9C,MAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAACO,QAAD,CAAxD;EAEAR,SAAS,CAAC,MAAM;IACdY,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,KAAD,IAAWP,WAAW,CAACO,KAAD,CAF9B;EAGD,CAJQ,EAIN,EAJM,CAAT,CALgB,CAST;;EAEPhB,SAAS,CAAC,MAAM;IACd,MAAMiB,oBAAoB,GAAGT,QAAQ,CAACU,MAAT,CAAiBC,OAAD,IAAa;MACxD,OAAOA,OAAO,CAACC,IAAR,CAAaC,iBAAb,GAAiCC,QAAjC,CAA0ChB,WAA1C,CAAP;IACD,CAF4B,CAA7B;IAGAK,mBAAmB,CAACM,oBAAD,CAAnB;EACD,CALQ,EAKN,CAACT,QAAD,EAAWF,WAAX,CALM,CAAT,CAXgB,CAgBY;;EAE5B,MAAMiB,cAAc,GAAIC,KAAD,IAAW;IAChC,MAAMC,iBAAiB,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBN,iBAAnB,EAA1B;IACAd,cAAc,CAACkB,iBAAD,CAAd;EACD,CAHD;;EAKA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAI,SAAS,EAAC,WAAd;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,SAAD;MACE,SAAS,EAAC,qBADZ;MAEE,WAAW,EAAC,iBAFd;MAGE,eAAe,EAAEF;IAHnB;MAAA;MAAA;MAAA;IAAA,QAFF,eAOE,QAAC,QAAD;MAAU,QAAQ,EAAEb;IAApB;MAAA;MAAA;MAAA;IAAA,QAPF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWD,CAlCD,C,CAoCA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAnGML,G;;KAAAA,G;AAqGN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}